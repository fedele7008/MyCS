#!/bin/bash

printHelp() {
  echo "${1} installation guide"
  echo "usage: '${0} [OPTION] [LANGUAGE]'"
  echo "options:"
  echo "  -debug : enable debug messages"
  echo "language:"
  echo "  -en : install the program and set the default language to English"
  echo "  -kr : install the program and set the default language to Korean"
}

# Check if -debug flag is turned on
debug=FALSE
for arg in "${@}"; do
  if [ ${arg} = "-debug" ]; then
    debug=TRUE
  fi
done

# Find the current program path to install
base=$(basename -- ${0};)
program_path=$(realpath -- ${0};)
program_path=${program_path//"/${base}"/""}

# Check if required files list data exist
requirement_file="${program_path}/data/installation_requirements.data"

if [ ! -e "${requirement_file}" ]; then
  echo "Critical Error: could not find installation requirement data"
  exit 1
fi

# Check if required files exist
error=FALSE
for required in $(cat ${requirement_file} | tr -d '\r'); do
  if [ ! -e "${program_path}/${required}" ]; then
    error=TRUE
    not_found="${not_found} ${program_path}/${required}"
  fi
done

if [ ${error} = TRUE ]; then
  echo "Critical Error: could not find required files for installation:"
  for file in ${not_found}; do
    echo "  ${file}"
  done
  exit 1
fi

# Parse the default program setting
program_setting_path="${program_path}/data/program_setting.properties"
source "${program_path}/executable/parseProperties" "${program_setting_path}"
lang=${default_lang}

# Check flag options
for flag in "${@}"; do
  if [ ${flag} = "-help" ]; then
    printHelp ${program_name}
    exit 1
  elif [ ${flag} = "-en" ]; then
    lang=en
  elif [ ${flag} = "-kr" ]; then
    lang=kr
  elif [ ${flag} = "-debug" ]; then
    continue
  else
    echo "The argument ${flag} is not found."
    echo "Please check the available options fron '${0} -help'."
    exit 1
  fi
done

# Determine the home path
home_path=$(echo ~)

# Determine the username
username=$(whoami)

# Parse language package
language_source="${program_path}/data/language/${lang}/installer.lang"
source "${program_path}/executable/parseLanguage" "${language_source}"

# Confirm setting
echo "${script0000}"
echo "${script0001}"
echo "${script0002}"
echo "${script0003}"
read -p "${script0004}" user_input

if [ ${user_input} = "confirm" ]; then
  echo "${script0005}"
else
  echo "${script0006}"
  echo "${script0007}"
  echo "${script0008}"
  exit 1
fi

# Creating project station
station_path="${home_path}/${station_name}"
if [ ! -e "${station_path}" ]; then
  echo -n "${script0010}"
  mkdir ${station_path}
  echo "${script0009}"
else
  echo "${script0011}"
fi

# Creating user setting
echo -n "${script0012}"
if [ ! -d "${program_path}/user" ]; then
  mkdir "${program_path}/user"
fi
echo ${script0009}

# Configuring user setting
user_setting_path="${program_path}/user/setting.properties"
echo -n "${script0013}"
echo "home_path=${home_path}" > "${user_setting_path}"
{
  echo "station_path=${station_path}"
  echo "program_path=${program_path}"
  echo "lang=${lang}"
} >> "${user_setting_path}"
echo "${script0009}"

# Creating bash profile
bash_profile_path="${home_path}/.bash_profile"
if [ ! -e "${bash_profile_path}" ]; then
  echo -n "${script0014}"
  touch "${bash_profile_path}"
  echo "${script0009}"
else
  echo "${script0015}"
fi

# Configuring bash profile
echo -n "${script0016}"
bash_profile_setup_path="${program_path}/data/bash_profile_setup.data"
dos2unix "${bash_profile_setup_path}" > /dev/null 2> /dev/null

while IFS='' read -r line; do
  line=$(eval echo "${line}")
  egrep "^$" <<< "${line}" > /dev/null 2> /dev/null
  if [ ${?} -eq 1 ]; then
    sed -i '/'"${line//"/"/"\\/"}"'/d' "${bash_profile_path}"
  fi
  echo "${line}" >> "${bash_profile_path}"
done < "${bash_profile_setup_path}"

consecutive=0
temp_file=$(mktemp "${home_path}/.bash_profile_tempXXXX")
while IFS='' read -r line; do
  egrep "^$" <<< ${line} > /dev/null 2> /dev/null
  if [ ${?} -eq 0 ]; then
    consecutive=$((${consecutive} + 1))
  else
    consecutive=0
  fi

  if [ ! ${consecutive} -gt 1 ]; then
    echo "${line}" >> "${temp_file}"
  fi
done < "${bash_profile_path}"
mv "${temp_file}" "${bash_profile_path}"

echo "${script0009}"

echo "${script0017}"
echo ""
echo "${script0018}"
